// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_CONNECTION_URL_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_CONNECTION_URL_URL_NON_POOLING") // uses a direct connection
}

model Department {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  parentDept     Department?  @relation("SubDepartments", fields: [parentId], references: [id])
  parentId       Int?
  subDepartments Department[] @relation("SubDepartments")
  employees      Employee[]   @relation("DepartmentEmployees")
}

model LoginDetails {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int      @unique
}

model Employee {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  firstName        String
  lastName         String
  position         Position          @default(representative)
  department       Department        @relation("DepartmentEmployees", fields: [departmentId], references: [id])
  departmentId     Int
  manager          Employee?         @relation("ManagerEmployees", fields: [managerId], references: [id])
  managerId        Int?
  subordinates     Employee[]        @relation("ManagerEmployees")
  vacationBalance  Int               @default(21)
  VacationRequest  VacationRequest[]
  approvedRequests VacationRequest[] @relation("approvedByManager")
  LoginDetails     LoginDetails?
}

enum Position {
  representative
  teamLead
  supervisor
  qualityAnalyst
  trainer
  hr
  rtm
  it
  operationsManager
  ceo
}

model VacationRequest {
  id                Int                   @id @default(autoincrement())
  from              DateTime
  to                DateTime
  reason            VacationReason
  createdAt         DateTime              @default(now())
  approvalStatus    VacationRequestStatus @default(pending)
  employee          Employee              @relation(fields: [employeeId], references: [id])
  employeeId        Int
  approvedBy        Int?
  approvedByManager Employee?             @relation("approvedByManager", fields: [approvedBy], references: [id])
}

enum VacationRequestStatus {
  pending
  approved
  denied
}

enum VacationReason {
  business_trip
  annual
  casual
  sick
}
